<!DOCTYPE html>
<html lang="en">
    <head>
    <meta charset="UTF-8">
        <title>IEEE WebDev</title>
        <meta name="viewport" content="width=device-width, initial-scale=1.0">

        <link rel="stylesheet" href="../../style/site.css">
        <link rel="stylesheet" href="../../style/lectures.css">

        <!-- codemirror -->
        <script src="../../src/codemirror/lib/codemirror.js"></script>
        <link rel="stylesheet" href="../../src/codemirror/lib/codemirror.css">
        <script src="../../src/codemirror/mode/xml/xml.js"></script>
        <script src="../../src/codemirror/mode/css/css.js"></script>
    </head>
    <body>
        <div id="_HEADER_" class="flex flex__row">

            <a id="Back" class="clickable" href="../../">
                <img src="../../media/back.svg" alt="back-arrow">
            </a>

            <h1>
                Lecture 2 (10.24.20) - Intro to HTML/CSS
            </h1>

        </div>
        <div id="_MAIN_"><div id="Squished">


            <div id="Table-of-Contents" class="bubble">
<h1>Table of Contents</h1>
    <ul>
        <li class="clickable"><a href="#HTML-Introduction">
            HTML Introduction
        </a></li>
        <li class="clickable"><a href="#CSS-Introduction">
            CSS Introduction
        </a></li>
    </ul>
            </div>




            <div id="HTML-Introduction">
<h1>
HTML Introduction
</h1>




<h2>What is HTML?</h2>
<p>
HTML is the standard markup language used by internet browsers to display content. Every time
you &ldquo;visit&rdquo; a page, a server somewhere is simply sending you an HTML file for your
browser to interpret. This means that we can open any local <code>.html</code> file and view it
just like a webpage.
<img src="../../media/Intro-to-HTMLCSS/local file.jpg" alt="Local File">
</p>




<h2>Opening Local .HTML files</h2>
<p>
Try opening your <code>index.html</code> in a browser, and you should see the exact same
page as if you had opened <code>https://{YOUR_USERNAME}.github.io</code>. Now if you edit your
<code>index.html</code> file, just hit refresh and you will see your changes. That way, you
don't need to reupload to see a new change. This is a wonderful way to test your website quickly.
</p>
<p>
<span class="highlight">Note: you should name all your .html files <code>index.html</code></span>
and distinguish between
files through its directory. This is because browsers can hide the <code>index.html</code>
part of a URL.
</p>
<p>
For example, the URL,
<code>https://ucsbieee.org/membership/</code> actually opens
<code>https://ucsbieee.org/membership/index.html</code>. However, the <code>index.html</code>
is hidden. If the file was renamed to <code>page.html</code>, the URL would be
<code>https://ucsbieee.org/membership/page.html</code>.
</p>




<h2>
HTML Elements
</h2>
<p>
HTML is written with tags. All content must go inside an opening tag <code>&lt;TAG></code>
and closing tag <code>&lt;/TAG></code>. For example:
<textarea class="code-HTML" readonly>
<h1>Header 1</h1>
<h2>Header 2</h2>
<h3>Header 3</h3>
<p>
    Paragraph here.
</p>
<p>
    Another paragraph here.
</p></textarea>

<div class="code_out">
    <h1>Header 1</h1>
    <h2>Header 2</h2>
    <h3>Header 3</h3>
    <p>Paragraph here.</p>
    <p>Another paragraph here.</p>
</div>

</p>

<p>
However, some HTML elements cannot have content and use <span class="highlight">self-closing</span> tags.
Common examples include line breaks, <code>&lt;br></code> and images.
<code>&lt;img></code>

<textarea class="code-HTML" readonly>
<div>
    <p>
        Hello, everyone! Wonderful<br>weather!
    </p>
</div></textarea>

<div class="code_out">
<p>Hello, everyone! Wonderful<br>weather!</p>
</div>

</p>

<a href="https://www.w3schools.com/tags/ref_byfunc.asp" target="_blank">
<div class="clickable external-link bubble">
    Here is a list of native HTML elements!
</div>
</a>




<h2>HTML Attributes</h2>

<p>
HTML Elements can have attributes denoted after the tag name with
<code>{ATTRIBUTE_NAME}="{VALUE}"</code>. Uses incude defining
the source file for an image, url for a link, and more! We will
be relying on these <em>heavily</em> for all CSS and JavaScript.
</p>

<textarea class="code-HTML" readonly>
<div class="picture-div">

    <img src="snorlax.png" alt="Snorlax">

    <p id="Snorlax-Label">
        Look at this bad boy! Learn more
        <a href="https://www.pokemon.com/us/pokedex/snorlax"
           target="_blank">
            here</a>!
    </p>
    
</div></textarea>

<div class="code_out">
<div class="picture-div">
    <img src="snorlax.png" alt="Snorlax" style="max-width: 100%;">
    <p id="Snorlax-Label">
        Look at this bad boy! Learn more
        <a href="https://www.pokemon.com/us/pokedex/snorlax" target="_blank">here</a>!
    </p>
</div>

</div>

<p>
Attributes also let you define elements to have a <code>class</code> and/or
an <code>id</code>. These are the two most important attributes for
styling your webpage. Classes and IDs will be explored in the
CSS section!</p>

<h2>
HTML Structure
</h2>
<p>
To make it easier for all browsers, all your html files should follow this structure.

<textarea class="code-HTML" readonly>
<!DOCTYPE html>
<html lang="en">
    <head>
    <meta charset="UTF-8"> <!-- Document Properties -->
        <title></title>
    </head>
    <body> <!-- Document Content -->

    </body>
</html>
</textarea>

No text should be put into the <code>head</code> element. That is where
you can include styling files, set a page title and description, or add
JavaScript. The body is where all content must go.
</p>
<p>
Feel free to copy this template and paste it into a file you can refer
back to!
</p>






<h2>Final Thoughts</h2>
<p>
Try to only use each tag for its intended purpose. Do not use a table
as a paragraph, or a paragraph as a button label. HTML is designed to
be simple, so people who read it should not have to guess what each
section is SUPPOSED to be. If you need a funtion, and are not sure
which element to use, <span class="highlight">when in doubt, use
<code>div</code></span>!
</p>

            </div>






            <div id="CSS-Introduction">
                <h1>CSS-Introduction</h1>
<h2>What is CSS?</h2>
<p>
CSS is the style sheet language we use to format the presentation of HTML.
We can use CSS to add backgrounds, colors, layouts, animations, and more!
It is an incredibly powerful tool that has been evolving for many years,
accross all browsers.
</p>
<p>
However, CSS can get quite tricky for beginners. For one thing, all browsers
handle CSS differently. It is important to check
<span class="highlight"><a href="https://caniuse.com/" target="_blank">
browser compatibility</a></span>
before applying any property. Another difficulty is that
<span class="highlight">some CSS properties will cancel out others</span>.
If a property does not seem to change your layout,
it is important to know why, since it may negativily affect something later.
But the biggest learning curve is simply remembering all the different properties. 
When starting out,
<span class="highlight">you will likely have to Google absolutely everything
several times over before you remember anything</span>.
It is perfectly normal to struggle with
CSS, so please ask questions and speak with me and fellow classmates for help!
</p>


<h2>Including CSS in HTML</h2>
<p>

CSS can be added in many ways, although I will only show you the main way.
<ol>
    <li>Create a file with the <code>.css</code> extension.</li>
    <li>Add the element <code>&lt;link rel="stylesheet" href="{PATH}"></code>
        to your HTML file's <code>head</code> section.</li>
</ol>


<code>index.html</code>
<textarea class="code-HTML" readonly>
<!DOCTYPE html>
<html lang="en">
    <head>
    <meta charset="UTF-8">
        <link rel="stylesheet" href="style.css">
    </head>
    <body>
        <h1 id="Welcome-Header">Saluatations!</h1>
        
        <p>Look at my color!!!</p>

        <div class="right">I'm on the right!</div>
    </body>
</html></textarea>


<code>style.css</code>
<textarea class="code-CSS" readonly>
html,
body { /* changing properties of entire document */
    font-family: cursive; /* changing font to Comic Sans */
}

#Welcome-Header { /* elements with ID of "Welcome-Header" */
    background-color: lightsalmon;
    width: fit-content; /* width is as small as possible */
    margin: auto; /* left and right margins are equal */
}

p { /* all paragraphs */
    background-color: lavender;
    color: darkslateblue;
}

.right { /* elements with class of "right" */
    background-color: skyblue;
    width: fit-content; /* width is as small as possible */
    margin-left: auto; /* div is pushed right */
}</textarea>


<div class="code_out" style="font-family: cursive;">
    <h1 id="Welcome-Header" style="
        background-color: lightsalmon;
        width: fit-content;
        margin: auto;
    ">Saluatations!</h1>

    <p style="
        color: darkslateblue;
        background-color: lavender;
    ">Look at my color!!!</p>

    <div class="right" style="
        background-color: skyblue;
        width: fit-content;
        margin-left: auto;
    ">I'm on the right!</div>
</div>
</p>



<h2>Selectors</h2>
<p>
The two easiest ways to select which elements to style is through classes and IDs.
Nearly every element you write should have either a class or an ID or both. Use
classes when you reuse stylings, ie things with left margins, red backgrounds, etc.
Use IDs for single-instance elements, ie a specific image, a page section, etc.
</p>


            </div>

        </div></div>
    </body>
</html>
<script src="../../script/code.js"></script>